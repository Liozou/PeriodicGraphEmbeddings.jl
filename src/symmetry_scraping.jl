# Scraping of Yusuke Seto's webpages (https://yseto.net/) to obtain the hall
# number used in spglib (https://spglib.github.io/spglib/dataset.html) from the
# space group name.

# This file is only used to generate symmetry_groups.jl, it is not included in
# PeriodicGraphEmbeddings. If you need to regenerate that file, simply execute this file
# You will need the HTTP.jl, Gumbo.jl and Cascadia.jl dependencies, as well
# as PeriodicGraphEmbeddings.jl (for file localisation)

using HTTP, Gumbo, Cascadia, PeriodicGraphEmbeddings

function read_singlenumber(td)::String
    return (only(only(td.children).children)::HTMLText).text
end

function read_td(td, sep="")
    l = String[]
    for x in only(td.children).children
        if x isa HTMLText
            push!(l, isempty(sep) ? join(split(x.text)) : strip(x.text))
        else
            l[end] = l[end] * strip((only(x.children)::HTMLText).text)
        end
    end
    return replace(join(l, sep), ("\\" => "\\\\"))
end


function collect_table_seto(url="https://yseto.net/?page_id=29")
    page = parsehtml(String(HTTP.get(url).body))
    table = only(eachmatch(sel"table", page.root))
    ret = Vector{Tuple{Int,Int,String,String,String,String}}()
    for l in table[2].children
        _num = read_singlenumber(l[1])
        _num[1] == 'S' && continue
        num = parse(Int, _num)
        table = parse(Int, read_singlenumber(l[2]))
        hall = read_td(l[5], ' ')
        hm = read_td(l[7])
        full = read_td(l[8])
        system = read_td(l[15])
        push!(ret, (num, table, hall, hm, full, system))
    end
    return ret
end


function export_space_group_table(space_groups=collect_table_seto(),
                                  dst=joinpath(dirname(pathof(PeriodicGraphEmbeddings)), "symmetry_groups.jl"))
    open(dst, "w") do f
        println(f, "# Space group tables")
        println(f, "# File generated by symmetry_scraping.jl")
        println(f)
        println(f, """\"\"\"
        Dictionnary mapping the Hall symbol of a symmetry group to its Hall number.

        In the keys, letters are lowercase, underscores are removed and space is kept to
        differentiate "p 6 2" from "p 62" and "p 3 2" from "p 32"
        \"\"\"""")
        println(f, "const SPACE_GROUP_HALL = Dict{String,Int}([")
        encountered = Set{String}()
        for (i, (num, _, hall, _, _, _)) in enumerate(space_groups)
            @assert i == num
            hall ∈ encountered && continue # should only happen for 324 (322), 328 (326) and 332 (330)
            push!(encountered, hall)
            println(f, "    \"", lowercase(hall), "\" => ", num, ',')
        end
        @assert length(encountered) == length(space_groups) - 3
        @assert space_groups[322][3] == space_groups[324][3]
        @assert space_groups[326][3] == space_groups[328][3]
        @assert space_groups[330][3] == space_groups[332][3]
        println(f, "])")
        println(f)

        empty!(encountered)
        println(f, """\"\"\"
        Dictionnary mapping the HM symbol of a symmetry group to its Hall number.

        In the keys, letters are lowercase and space is removed.
        \"\"\"""")
        println(f, "const SPACE_GROUP_HM = Dict{String,Int}([")
        for (num, _, _, _hm, _, _) in space_groups
            for hm in split(_hm, '=')
                hm ∈ encountered && continue
                push!(encountered, hm)
                println(f, "    \"", lowercase(hm), "\" => ", num, ',')
            end
        end
        println(f, "])")
        println(f)

        println(f, """\"\"\"
        Dictionnary mapping the full notation representation of a symmetry group to its Hall number,
        if the full notation is distinct from the H-M symbol.

        In the keys, letters are lowercase and space is removed.
        \"\"\"""")
        println(f, "const SPACE_GROUP_FULL = Dict{String,Int}([")
        for (num, _, _, _, full, _) in space_groups
            full ∈ encountered && continue
            push!(encountered, full)
            println(f, "    \"", lowercase(full), "\" => ", num, ',')
        end
        println(f, "])")
        println(f)

        last_encountered = 0
        println(f, "\"\"\"List mapping the International Table number of a symmetry group to its Hall number\"\"\"")
        println(f, "const SPACE_GROUP_IT = Int[")
        for (num, table, _, _, _, _) in space_groups
            table == last_encountered && continue
            last_encountered += 1
            @assert table == last_encountered
            println(f, "    ", num, ',')
        end
        println(f, "]")
        println(f)

        println(f, "\"\"\"List of Hall symbols and crystal system corresponding to each Hall number\"\"\"")
        println(f, "const HALL_SYMBOLS = Tuple{String,String}[")
        for (_, _, hall, _, _, system) in space_groups
            println(f, "    (\"", hall, "\", \"", system, "\"),")
        end
        println(f, "]")
        println(f)

        println(f, "# Raw data (scraped from https://yseto.net/?page_id=29")
        println(f)
        println(f, "const RAW_DATA = Tuple{Int,Int,String,String,String,String}[")
        println(f, "    # (\"Hall number\", IT table number, Hall symbol, HM symbol, Full notation, Crystal system)")
        for (num, table, hall, hm, full, system) in space_groups
            println(f, "    (", num, ", ", table, ", \"", hall, "\", \"", hm,
                       "\", \"", full, "\", \"", system, "\"),")
        end
        println(f, "]")
        println(f)
    end
end

function raw_data_spglib(f)
    println(f, "const RAW_DATA = Tuple{Int,Int,String,String,String,String}[")
    for i in 1:530
        sp = get_spacegroup_type(i)
        println("    (", i, ", ", sp.spacegroup_number,
                            ", ", repr(sp.hall_symbol),
                            ", ", repr(replace(sp.international, ' '=>"", '_'=>"")),
                            ", ", repr(replace(sp.international_full, ' '=>"", '_'=>"")),
                            ", \"", PGE.RAW_SYMMETRY_DATA[i][end], "\"),")
    end
    println(f, "]")
end



@static if abspath(PROGRAM_FILE) == @__FILE__
    export_space_group_table()
end
